diff --git a/Effects/agriculture.eff b/Effects/agriculture.eff
index 89f9a30af..c671c0d6d 100644
--- a/Effects/agriculture.eff
+++ b/Effects/agriculture.eff
@@ -153,6 +153,10 @@
     <predicate>
       <and>
         <property>/sim/rendering/shaders/skydome</property>
+        <equal>
+          <value type="float">0.0</value>
+          <float-property>/sim/rendering/photoscenery/enabled</float-property>
+        </equal>
         <and>
           <less-equal>
             <value type="float">6.0</value>
diff --git a/Effects/airfield.eff b/Effects/airfield.eff
index 1a3bd60f4..231cbf1ef 100644
--- a/Effects/airfield.eff
+++ b/Effects/airfield.eff
@@ -146,6 +146,10 @@
         <fragment-shader>Shaders/hazes.frag</fragment-shader>
         <fragment-shader>Shaders/secondary_lights.frag</fragment-shader>
         <fragment-shader>Shaders/filters-ALS.frag</fragment-shader>
+        <attribute>
+          <name>orthophotoTexCoord</name>
+          <index>14</index>
+        </attribute>
         <fragment-shader>Shaders/shadows-include.frag</fragment-shader>
       </program>
       <uniform>
@@ -621,6 +625,11 @@
         <type>int</type>
         <value>2</value> <!-- AMBIENT_AND_DIFFUSE -->
       </uniform>
+      <uniform>
+        <name>orthophotoTexture</name>
+        <type>sampler-2d</type>
+        <value type="int">15</value>
+      </uniform>
       <!-- BEGIN shadows include -->
       <uniform>
         <name>shadow_tex</name>
diff --git a/Effects/crop.eff b/Effects/crop.eff
index 961b44163..5126aa90e 100644
--- a/Effects/crop.eff
+++ b/Effects/crop.eff
@@ -25,6 +25,10 @@
       <and>
 	    <property>/sim/rendering/shaders/quality-level</property>
         <property>/sim/rendering/shaders/crop</property>
+        <equal>
+          <value type="float">0.0</value>
+          <float-property>/sim/rendering/photoscenery/enabled</float-property>
+        </equal>
         <or>
           <less-equal>
             <value type="float">2.0</value>
diff --git a/Effects/forest.eff b/Effects/forest.eff
index f4737cd04..2695b9713 100644
--- a/Effects/forest.eff
+++ b/Effects/forest.eff
@@ -75,6 +75,10 @@
       <and>
 		<property>/sim/rendering/shaders/quality-level</property>
 		<property>/sim/rendering/shaders/transition</property>
+    <equal>
+			<value type="float">0.0</value>
+			<float-property>/sim/rendering/photoscenery/enabled</float-property>
+		</equal>
         <or>
           <less-equal>
             <value type="float">2.0</value>
diff --git a/Effects/grass.eff b/Effects/grass.eff
index 34898b1b1..a9acabe98 100644
--- a/Effects/grass.eff
+++ b/Effects/grass.eff
@@ -139,6 +139,10 @@
 	<fragment-shader>Shaders/hazes.frag</fragment-shader>
 	<fragment-shader>Shaders/secondary_lights.frag</fragment-shader>
         <fragment-shader>Shaders/filters-ALS.frag</fragment-shader>
+        <attribute>
+          <name>orthophotoTexCoord</name>
+          <index>14</index>
+        </attribute>
         <fragment-shader>Shaders/shadows-include.frag</fragment-shader>
       </program>
       <uniform>
@@ -614,6 +618,11 @@
         <type>int</type>
         <value>2</value> <!-- AMBIENT_AND_DIFFUSE -->
       </uniform>
+      <uniform>
+        <name>orthophotoTexture</name>
+        <type>sampler-2d</type>
+        <value type="int">15</value>
+      </uniform>
       <!-- BEGIN shadows include -->
       <uniform>
         <name>shadow_tex</name>
diff --git a/Effects/landmass.eff b/Effects/landmass.eff
index 107c3bef8..4cef4e19c 100644
--- a/Effects/landmass.eff
+++ b/Effects/landmass.eff
@@ -50,6 +50,10 @@
 			<and>
 				<property>/sim/rendering/shaders/quality-level</property>
 				<property>/sim/rendering/shaders/landmass</property>
+				<equal>
+					<value type="float">0.0</value>
+					<float-property>/sim/rendering/photoscenery/enabled</float-property>
+				</equal>
 				<less-equal>
 					<value type="float">4.0</value>
 					<float-property>/sim/rendering/shaders/landmass</float-property>
@@ -384,6 +388,10 @@
 			<and>
 				<property>/sim/rendering/shaders/quality-level</property>
 				<property>/sim/rendering/shaders/landmass</property>
+				<equal>
+					<value type="float">0.0</value>
+					<float-property>/sim/rendering/photoscenery/enabled</float-property>
+        		</equal>
 				<or>
 					<less-equal>
 						<value type="float">2.0</value>
diff --git a/Effects/terrain-default.eff b/Effects/terrain-default.eff
index 5a6c9073c..a13b548d2 100644
--- a/Effects/terrain-default.eff
+++ b/Effects/terrain-default.eff
@@ -329,6 +329,10 @@
         <fragment-shader>Shaders/hazes.frag</fragment-shader>
         <fragment-shader>Shaders/secondary_lights.frag</fragment-shader>
         <fragment-shader>Shaders/filters-ALS.frag</fragment-shader>
+        <attribute>
+          <name>orthophotoTexCoord</name>
+          <index>14</index>
+        </attribute>
         <fragment-shader>Shaders/shadows-include.frag</fragment-shader>
       </program>
 	  <uniform>
@@ -835,6 +839,11 @@
         <value>2</value>
         <!-- AMBIENT_AND_DIFFUSE -->
       </uniform>
+      <uniform>
+        <name>orthophotoTexture</name>
+        <type>sampler-2d</type>
+        <value type="int">15</value>
+      </uniform>
       <!-- BEGIN shadows include -->
       <uniform>
         <name>shadow_tex</name>
@@ -972,6 +981,10 @@
         <fragment-shader>Shaders/noise.frag</fragment-shader>
         <fragment-shader>Shaders/hazes.frag</fragment-shader>
         <fragment-shader>Shaders/filters-ALS.frag</fragment-shader>
+        <attribute>
+          <name>orthophotoTexCoord</name>
+          <index>14</index>
+        </attribute>
         <fragment-shader>Shaders/shadows-include.frag</fragment-shader>
       </program>
       <uniform>
@@ -1161,6 +1174,11 @@
         <value>2</value>
         <!-- AMBIENT_AND_DIFFUSE -->
       </uniform>
+      <uniform>
+        <name>orthophotoTexture</name>
+        <type>sampler-2d</type>
+        <value type="int">15</value>
+      </uniform>
       <!-- BEGIN shadows include -->
       <uniform>
         <name>shadow_tex</name>
@@ -1281,6 +1299,10 @@
         <fragment-shader>Shaders/hazes.frag</fragment-shader>
 	<fragment-shader>Shaders/noise.frag</fragment-shader>
 	<fragment-shader>Shaders/filters-ALS.frag</fragment-shader>
+        <attribute>
+          <name>orthophotoTexCoord</name>
+          <index>14</index>
+        </attribute>
     <fragment-shader>Shaders/shadows-include.frag</fragment-shader>
       </program>
       <uniform>
@@ -1405,6 +1427,11 @@
         <value>2</value>
         <!-- AMBIENT_AND_DIFFUSE -->
       </uniform>
+      <uniform>
+        <name>orthophotoTexture</name>
+        <type>sampler-2d</type>
+        <value type="int">15</value>
+      </uniform>
       <!-- BEGIN shadows include -->
       <uniform>
         <name>shadow_tex</name>
@@ -1436,8 +1463,13 @@
   <technique n="11">
     <predicate>
       <and>
-		<property>/sim/rendering/shaders/quality-level</property>
-        <property>/sim/rendering/shaders/generic</property>
+        <or>
+          <property>/sim/rendering/photoscenery/enabled</property>
+          <and>
+            <property>/sim/rendering/shaders/quality-level</property>
+            <property>/sim/rendering/shaders/generic</property>
+          </and>
+        </or>
         <or>
           <less-equal>
             <value type="float">2.0</value>
@@ -1528,6 +1560,10 @@
         <vertex-shader>Shaders/shadows-include.vert</vertex-shader>
         <fragment-shader>Shaders/default.frag</fragment-shader>
         <fragment-shader>Shaders/include_fog.frag</fragment-shader>
+        <attribute>
+          <name>orthophotoTexCoord</name>
+          <index>14</index>
+        </attribute>
         <fragment-shader>Shaders/shadows-include.frag</fragment-shader>
       </program>
       <uniform>
@@ -1571,6 +1607,11 @@
         <value>2</value>
         <!-- AMBIENT_AND_DIFFUSE -->
       </uniform>
+      <uniform>
+        <name>orthophotoTexture</name>
+        <type>sampler-2d</type>
+        <value type="int">15</value>
+      </uniform>
       <!-- BEGIN shadows include -->
       <uniform>
         <name>shadow_tex</name>
diff --git a/Effects/terrain-overlay.eff b/Effects/terrain-overlay.eff
index 97ea9067b..f4d84a170 100644
--- a/Effects/terrain-overlay.eff
+++ b/Effects/terrain-overlay.eff
@@ -159,6 +159,10 @@
         <fragment-shader>Shaders/hazes.frag</fragment-shader>
         <fragment-shader>Shaders/secondary_lights.frag</fragment-shader>
         <fragment-shader>Shaders/filters-ALS.frag</fragment-shader>
+        <attribute>
+          <name>orthophotoTexCoord</name>
+          <index>14</index>
+        </attribute>
         <fragment-shader>Shaders/shadows-include.frag</fragment-shader>
       </program>
 	  <uniform>
@@ -665,6 +669,11 @@
         <value>2</value>
         <!-- AMBIENT_AND_DIFFUSE -->
       </uniform>
+      <uniform>
+        <name>orthophotoTexture</name>
+        <type>sampler-2d</type>
+        <value type="int">15</value>
+      </uniform>
       <!-- BEGIN shadows include -->
       <uniform>
         <name>shadow_tex</name>
diff --git a/Effects/urban.eff b/Effects/urban.eff
index a904e7f28..02096a0b6 100644
--- a/Effects/urban.eff
+++ b/Effects/urban.eff
@@ -54,6 +54,10 @@
 			<and>
 				<property>/sim/rendering/shaders/skydome</property>
 				<property>/sim/rendering/shaders/urban</property>
+				<equal>
+					<value type="float">0.0</value>
+					<float-property>/sim/rendering/photoscenery/enabled</float-property>
+				</equal>
 				<less-equal>
 					<value type="float">4.0</value>
 					<float-property>/sim/rendering/shaders/urban</float-property>
@@ -780,6 +784,10 @@
 			<and>
 				<property>/sim/rendering/shaders/skydome</property>
 				<property>/sim/rendering/shaders/urban</property>
+				<equal>
+					<value type="float">0.0</value>
+					<float-property>/sim/rendering/photoscenery/enabled</float-property>
+				</equal>
 				<less-equal>
 					<value type="float">1.0</value>
 					<float-property>/sim/rendering/shaders/urban</float-property>
@@ -1460,6 +1468,10 @@
 			<and>
 				<property>/sim/rendering/shaders/quality-level</property>
 				<property>/sim/rendering/shaders/urban</property>
+				<equal>
+          			<value type="float">0.0</value>
+          			<float-property>/sim/rendering/photoscenery/enabled</float-property>
+				</equal>
 				<less-equal>
 					<value type="float">4.0</value>
 					<float-property>/sim/rendering/shaders/urban</float-property>
@@ -1748,6 +1760,10 @@
 			<and>
 				<property>/sim/rendering/shaders/quality-level</property>
 				<property>/sim/rendering/shaders/urban</property>
+				<equal>
+          			<value type="float">0.0</value>
+          			<float-property>/sim/rendering/photoscenery/enabled</float-property>
+        		</equal>
 				<less-equal>
 					<value type="float">1.0</value>
 					<float-property>/sim/rendering/shaders/urban</float-property>
diff --git a/Shaders/airfield-ALS.frag b/Shaders/airfield-ALS.frag
index 753ed0555..220f89fcb 100644
--- a/Shaders/airfield-ALS.frag
+++ b/Shaders/airfield-ALS.frag
@@ -9,11 +9,13 @@ varying vec3 relPos;
 varying vec3 worldPos;
 varying vec2 rawPos;
 varying vec3 ecViewdir;
+varying vec2 orthoTexCoord;
 
 
 uniform sampler2D texture;
 uniform sampler2D overlay_texture;
 uniform sampler2D grain_texture;
+uniform sampler2D orthophotoTexture;
 
 varying float steepness;
 
@@ -54,6 +56,8 @@ uniform int use_searchlight;
 uniform int use_landing_light;
 uniform int use_alt_landing_light;
 
+uniform bool orthophotoAvailable;
+
 const float EarthRadius = 5800000.0;
 const float terminator_width = 200000.0;
 
@@ -163,6 +167,13 @@ float noise_2000m = Noise3D(worldPos.xyz, 2000.0);
     texel = texture2D(texture, gl_TexCoord[0].st * base_layer_magnification); 
     float local_autumn_factor = texel.a;
 
+	if (orthophotoAvailable) {
+        vec4 sat_texel = texture2D(orthophotoTexture, orthoTexCoord);
+        if (sat_texel.a > 0) {
+            texel.rgb = sat_texel.rgb;
+        }
+    }
+
     float distortion_factor = 1.0;
     float noise_term;
     float snow_alpha;
diff --git a/Shaders/default.frag b/Shaders/default.frag
index 79989d1b7..943671f59 100644
--- a/Shaders/default.frag
+++ b/Shaders/default.frag
@@ -5,12 +5,16 @@
 
 varying vec4 diffuse_term;
 varying vec3 normal;
+varying vec2 orthoTexCoord;
 
 uniform sampler2D texture;
+uniform sampler2D orthophotoTexture;
 
 ////fog "include" /////
 uniform int fogType;
 
+uniform bool orthophotoAvailable;
+
 vec3 fog_Func(vec3 color, int type);
 //////////////////////
 
@@ -54,6 +58,14 @@ void main()
     // is closer to what the OpenGL fixed function pipeline does.
     color = clamp(color, 0.0, 1.0);
     texel = texture2D(texture, gl_TexCoord[0].st);
+
+    if (orthophotoAvailable) {
+        vec4 sat_texel = texture2D(orthophotoTexture, orthoTexCoord);
+        if (sat_texel.a > 0) {
+            texel.rgb = sat_texel.rgb;
+        }
+    }
+
     fragColor = color * texel + specular;
 
     fragColor.rgb = fog_Func(fragColor.rgb, fogType);
diff --git a/Shaders/default.vert b/Shaders/default.vert
index c58c56349..0635ee02a 100644
--- a/Shaders/default.vert
+++ b/Shaders/default.vert
@@ -12,12 +12,15 @@
 #define MODE_DIFFUSE 1
 #define MODE_AMBIENT_AND_DIFFUSE 2
 
+attribute vec2 orthophotoTexCoord;
+
 // The constant term of the lighting equation that doesn't depend on
 // the surface normal is passed in gl_{Front,Back}Color. The alpha
 // component is set to 1 for front, 0 for back in order to work around
 // bugs with gl_FrontFacing in the fragment shader.
 varying vec4 diffuse_term;
 varying vec3 normal;
+varying vec2 orthoTexCoord;
 
 uniform int colorMode;
 
@@ -33,6 +36,7 @@ void main()
 {
     gl_Position = ftransform();
     gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;
+    orthoTexCoord = orthophotoTexCoord;
     normal = gl_NormalMatrix * gl_Normal;
     vec4 ambient_color, diffuse_color;
     if (colorMode == MODE_DIFFUSE) {
diff --git a/Shaders/generic-ALS-base.vert b/Shaders/generic-ALS-base.vert
index 103c4a7ac..798259b3e 100644
--- a/Shaders/generic-ALS-base.vert
+++ b/Shaders/generic-ALS-base.vert
@@ -15,6 +15,8 @@
 #define MODE_DIFFUSE 1
 #define MODE_AMBIENT_AND_DIFFUSE 2
 
+attribute vec2 orthophotoTexCoord;
+
 // The constant term of the lighting equation that doesn't depend on
 // the surface normal is passed in gl_{Front,Back}Color. The alpha
 // component is set to 1 for front, 0 for back in order to work around
@@ -22,6 +24,7 @@
 varying vec4 diffuse_term;
 varying vec3 normal;
 varying vec3 relPos;
+varying vec2 orthoTexCoord;
 
 varying float yprime_alt;
 varying float mie_angle;
@@ -77,6 +80,7 @@ void main()
     //vec4 ecPosition = gl_ModelViewMatrix * gl_Vertex;
     gl_Position = ftransform();
     gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;
+    orthoTexCoord = orthophotoTexCoord;
     normal = gl_NormalMatrix * gl_Normal;
     vec4 ambient_color, diffuse_color;
     if (colorMode == MODE_DIFFUSE) {
diff --git a/Shaders/model-interior-ALS-base.vert b/Shaders/model-interior-ALS-base.vert
index 7a650f3e7..fa32f0815 100644
--- a/Shaders/model-interior-ALS-base.vert
+++ b/Shaders/model-interior-ALS-base.vert
@@ -15,6 +15,8 @@
 #define MODE_DIFFUSE 1
 #define MODE_AMBIENT_AND_DIFFUSE 2
 
+attribute vec2 orthophotoTexCoord;
+
 // The constant term of the lighting equation that doesn't depend on
 // the surface normal is passed in gl_{Front,Back}Color. The alpha
 // component is set to 1 for front, 0 for back in order to work around
@@ -75,6 +77,9 @@ void main()
     //vec4 ecPosition = gl_ModelViewMatrix * gl_Vertex;
     gl_Position = ftransform();
     gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;
+
+    orthoTexCoord = orthophotoTexCoord;
+    
     normal = gl_NormalMatrix * gl_Normal;
     vec4 ambient_color, diffuse_color;
     if (colorMode == MODE_DIFFUSE) {
diff --git a/Shaders/terrain-ALS-base.frag b/Shaders/terrain-ALS-base.frag
index 5e7bc20e7..dffde6229 100644
--- a/Shaders/terrain-ALS-base.frag
+++ b/Shaders/terrain-ALS-base.frag
@@ -9,10 +9,12 @@ varying vec3 relPos;
 
 
 uniform sampler2D texture;
+uniform sampler2D orthophotoTexture;
 
 
 varying float yprime_alt;
 varying float mie_angle;
+varying vec2 orthoTexCoord;
 
 
 uniform float visibility;
@@ -25,6 +27,8 @@ uniform float overcast;
 uniform float eye_alt;
 uniform float cloud_self_shading;
 
+uniform bool orthophotoAvailable;
+
 const float EarthRadius = 5800000.0;
 const float terminator_width = 200000.0;
 
@@ -86,6 +90,14 @@ void main()
     // is closer to what the OpenGL fixed function pipeline does.
     color = clamp(color, 0.0, 1.0);
     texel = texture2D(texture, gl_TexCoord[0].st);
+
+	if (orthophotoAvailable) {
+        vec4 sat_texel = texture2D(orthophotoTexture, orthoTexCoord);
+        if (sat_texel.a > 0) {
+            texel.rgb = sat_texel.rgb;
+        }
+    }
+
     fragColor = color * texel + specular;
 
 
diff --git a/Shaders/terrain-ALS-detailed.frag b/Shaders/terrain-ALS-detailed.frag
index 21fbc77d9..9b946af40 100644
--- a/Shaders/terrain-ALS-detailed.frag
+++ b/Shaders/terrain-ALS-detailed.frag
@@ -8,12 +8,14 @@ varying vec3 normal;
 varying vec3 relPos;
 varying vec2 rawPos;
 varying vec3 worldPos;
+varying vec2 orthoTexCoord;
 
 
 
 uniform sampler2D texture;
 uniform sampler2D detail_texture;
 uniform sampler2D mix_texture;
+uniform sampler2D orthophotoTexture;
 
 //varying float yprime_alt;
 //varying float mie_angle;
@@ -41,6 +43,8 @@ uniform float hires_overlay_bias;
 uniform int quality_level;
 uniform int tquality_level;
 
+uniform bool orthophotoAvailable;
+
 const float EarthRadius = 5800000.0;
 const float terminator_width = 200000.0;
 
@@ -121,16 +125,25 @@ float noise_2000m = Noise3D(worldPos.xyz, 2000.0);
 
 //
 
-
 // get the texels
+	int flag = 1;
+    int mix_flag = 1;
 
     texel = texture2D(texture, gl_TexCoord[0].st);
     float local_autumn_factor = texel.a;
 
+	if (orthophotoAvailable) {
+        vec4 sat_texel = texture2D(orthophotoTexture, orthoTexCoord);
+        if (sat_texel.a > 0) {
+            texel.rgb = sat_texel.rgb;
+			flag = 0;
+			mix_flag = 0;
+        }
+    }
+
     float distortion_factor = 1.0;
     vec2 stprime;
-    int flag = 1;
-    int mix_flag = 1;
+    
     float noise_term;
     float snow_alpha;
 
@@ -155,14 +168,14 @@ float noise_2000m = Noise3D(worldPos.xyz, 2000.0);
    	
 	}
 
-    if (tquality_level > 2)
+    if ((tquality_level > 2) && (mix_flag == 1))
 	{
 	mix_texel = texture2D(mix_texture, gl_TexCoord[0].st * 1.3);
 	if (mix_texel.a <0.1) {mix_flag = 0;}
  	}
 
 
-    if (tquality_level > 3)  
+    if (tquality_level > 3 && (flag == 1))  
 	{
 	stprime = vec2 (0.86*gl_TexCoord[0].s + 0.5*gl_TexCoord[0].t, 0.5*gl_TexCoord[0].s - 0.86*gl_TexCoord[0].t);
     	//distortion_factor = 0.9375 + (1.0 * nvL[2]);
diff --git a/Shaders/terrain-ALS-detailed.vert b/Shaders/terrain-ALS-detailed.vert
index 5bdaa4470..2b29bcee4 100644
--- a/Shaders/terrain-ALS-detailed.vert
+++ b/Shaders/terrain-ALS-detailed.vert
@@ -15,6 +15,8 @@
 #define MODE_DIFFUSE 1
 #define MODE_AMBIENT_AND_DIFFUSE 2
 
+attribute vec2 orthophotoTexCoord;
+
 // The constant term of the lighting equation that doesn't depend on
 // the surface normal is passed in gl_{Front,Back}Color. The alpha
 // component is set to 1 for front, 0 for back in order to work around
@@ -24,6 +26,7 @@ varying vec3 normal;
 varying vec3 relPos;
 varying vec2 rawPos;
 varying vec3 worldPos;
+varying vec2 orthoTexCoord;
 
 
 varying float mie_angle;
@@ -95,6 +98,7 @@ void main()
     //vec4 ecPosition = gl_ModelViewMatrix * gl_Vertex;
     gl_Position = ftransform();
     gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;
+    orthoTexCoord = orthophotoTexCoord;
     normal = gl_NormalMatrix * gl_Normal;
     //nvec = (gl_NormalMatrix * gl_Normal).xy;
     vec4 ambient_color, diffuse_color;
diff --git a/Shaders/terrain-ALS-ultra.frag b/Shaders/terrain-ALS-ultra.frag
index a72393771..df6b224a2 100644
--- a/Shaders/terrain-ALS-ultra.frag
+++ b/Shaders/terrain-ALS-ultra.frag
@@ -10,6 +10,7 @@ varying vec2 rawPos;
 varying vec3 worldPos;
 varying vec3 ecViewdir;
 varying vec2 grad_dir;
+varying vec2 orthoTexCoord;
 
 
 uniform sampler2D texture;
@@ -18,6 +19,7 @@ uniform sampler2D mix_texture;
 uniform sampler2D grain_texture;
 uniform sampler2D dot_texture;
 uniform sampler2D gradient_texture;
+uniform sampler2D orthophotoTexture;
 
 
 varying float steepness;
@@ -62,6 +64,8 @@ uniform int use_searchlight;
 uniform int use_landing_light;
 uniform int use_alt_landing_light;
 
+uniform bool orthophotoAvailable;
+
 const float EarthRadius = 5800000.0;
 const float terminator_width = 200000.0;
 
@@ -233,6 +237,16 @@ float snownoise_50m = mix(noise_50m, slopenoise_100m, clamp(3.0*(1.0-steepness),
 
     texel = texture2D(texture, gl_TexCoord[0].st);
     float local_autumn_factor = texel.a;
+
+	if (orthophotoAvailable) {
+        vec4 sat_texel = texture2D(orthophotoTexture, orthoTexCoord);
+        if (sat_texel.a > 0) {
+            texel.rgb = sat_texel.rgb;
+			flag = 0;
+			mix_flag = 0;
+        }
+    }
+
 	grain_texel = texture2D(grain_texture, gl_TexCoord[0].st * 25.0);
 	gradient_texel = texture2D(gradient_texture, gl_TexCoord[0].st * 4.0);
 
@@ -264,18 +278,23 @@ float snownoise_50m = mix(noise_50m, slopenoise_100m, clamp(3.0*(1.0-steepness),
 	}
 
 	// the mixture/gradient texture
-	mix_texel = texture2D(mix_texture, gl_TexCoord[0].st * 1.3);
-	if (mix_texel.a <0.1) {mix_flag = 0;}
+	if (mix_flag == 1) {
+		mix_texel = texture2D(mix_texture, gl_TexCoord[0].st * 1.3);
+		if (mix_texel.a <0.1) {mix_flag = 0;}
+	}
 
 	// the hires overlay texture is loaded with parallax mapping
 	
-	stprime = vec2 (0.86*gl_TexCoord[0].s + 0.5*gl_TexCoord[0].t, 0.5*gl_TexCoord[0].s - 0.86*gl_TexCoord[0].t);
-	distortion_factor = 0.97 + 0.06 * noise_500m;
-	stprime = stprime * distortion_factor * 15.0;
-	stprime = stprime + normalize(relPos).xy * 0.022 * (noise_10m + 0.5 * noise_5m +0.25 * noise_2m - 0.875 );
+	if (flag == 1) {
+		stprime = vec2 (0.86*gl_TexCoord[0].s + 0.5*gl_TexCoord[0].t, 0.5*gl_TexCoord[0].s - 0.86*gl_TexCoord[0].t);
+		distortion_factor = 0.97 + 0.06 * noise_500m;
+		stprime = stprime * distortion_factor * 15.0;
+		stprime = stprime + normalize(relPos).xy * 0.022 * (noise_10m + 0.5 * noise_5m +0.25 * noise_2m - 0.875 );
+		
+		detail_texel = texture2D(detail_texture, stprime);
+		if (detail_texel.a <0.1) {flag = 0;}
+	}
 	
-    	detail_texel = texture2D(detail_texture, stprime);
-	if (detail_texel.a <0.1) {flag = 0;}
 	
 
 
diff --git a/Shaders/terrain-ALS-ultra.vert b/Shaders/terrain-ALS-ultra.vert
index ebe1b95a9..f58ab8ee1 100644
--- a/Shaders/terrain-ALS-ultra.vert
+++ b/Shaders/terrain-ALS-ultra.vert
@@ -15,6 +15,8 @@
 #define MODE_DIFFUSE 1
 #define MODE_AMBIENT_AND_DIFFUSE 2
 
+attribute vec2 orthophotoTexCoord;
+
 // The constant term of the lighting equation that doesn't depend on
 // the surface normal is passed in gl_{Front,Back}Color. The alpha
 // component is set to 1 for front, 0 for back in order to work around
@@ -26,6 +28,7 @@ varying vec2 rawPos;
 varying vec3 worldPos;
 varying vec3 ecViewdir;
 varying vec2 grad_dir;
+varying vec2 orthoTexCoord;
 
 varying float mie_angle;
 varying float steepness;
@@ -110,6 +113,7 @@ void main()
     //vec4 ecPosition = gl_ModelViewMatrix * gl_Vertex;
     //gl_Position = ftransform();
     gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;
+    orthoTexCoord = orthophotoTexCoord;
     normal = gl_NormalMatrix * gl_Normal;
     //nvec = (gl_NormalMatrix * gl_Normal).xy;
     vec4 ambient_color, diffuse_color;
diff --git a/Shaders/ws30.frag b/Shaders/ws30.frag
index f8fa8fb68..c18fc9e64 100644
--- a/Shaders/ws30.frag
+++ b/Shaders/ws30.frag
@@ -8,6 +8,7 @@
 varying vec4 diffuse_term;
 varying vec3 normal;
 varying vec3 relPos;
+varying vec2 orthoTexCoord;
 
 
 uniform sampler2D landclass;
diff --git a/defaults.xml b/defaults.xml
index acdfcdeff..f7b1c1668 100644
--- a/defaults.xml
+++ b/defaults.xml
@@ -58,6 +58,9 @@ Started September 2000 by David Megginson, david@megginson.com
         <enabled type="bool" userarchive="y">false</enabled>
         <sun-atlas-size type="int" userarchive="y">2048</sun-atlas-size>
       </shadows>
+      <photoscenery>
+        <enabled type="bool" userarchive="y">false</enabled>
+      </photoscenery>
       <debug type="bool">false</debug>
       <realism type="int">5</realism>
       <filtering type="int">8</filtering>
diff --git a/gui/dialogs/rendering.xml b/gui/dialogs/rendering.xml
index cf0841afc..97114235a 100644
--- a/gui/dialogs/rendering.xml
+++ b/gui/dialogs/rendering.xml
@@ -861,32 +861,17 @@
             <command>reload-materials</command>
           </binding>
         </combo>
-
-				<text>
-					<row>8</row>
-					<col>0</col>
-					<colspan>2</colspan>
-					<halign>left</halign>
-					<color>
-			      <red>1.0</red>
-			      <green>0.6</green>
-			      <blue>0.6</blue>
-			    </color>
-					<label>Warning: Pylons, Detailed Roads, Buildings use a lot of memory</label>
-        </text>
-
-				<text>
-					<row>9</row>
-					<col>0</col>
-					<colspan>2</colspan>
-					<halign>left</halign>
-					<color>
-			      <red>1.0</red>
-			      <green>0.6</green>
-			      <blue>0.6</blue>
-			    </color>
-					<label>and disk space, and are only available in limited areas.</label>
-        </text>
+		<checkbox>
+			<row>8</row>
+			<col>0</col>
+			<label>Satellite Photoscenery</label>
+			<name>satellite-photoscenery</name>
+			<property>/sim/rendering/photoscenery/enabled</property>
+			<binding>
+				<command>dialog-apply</command>
+				<object-name>satellite-photoscenery</object-name>
+			</binding>
+		</checkbox>
 
 			</group>
 
@@ -1102,6 +1087,7 @@
 
 
       var reload_props = [
+	  	"/sim/rendering/photoscenery/enabled",
         "/sim/rendering/materials-file",
         "/sim/rendering/osm-buildings",
         "/sim/rendering/random-buildings",
